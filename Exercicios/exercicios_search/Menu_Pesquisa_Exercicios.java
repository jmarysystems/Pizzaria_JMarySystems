/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package exercicios_search;

import assunto_new.BookInfoSubcategoria;
import categorias_new.BookInfoMateria;
import exercicios.Exercicios;
import exercicios.Exercicios_Home;
import exercicios_atualizar.Exercicios_Atualizar;
import exercicios_new.BookInfoAssunto;
import exercicios_visualizar.Exercicios_Visualizar;
import home_usuario_logado.Bean_Usuario_Logado;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.List;
import javax.persistence.Query;
import jpa.JPAUtil;
import subcategoria_new.BookInfoCategoria;
import utilidades.DB;
import utilidades.JOPM;

/**
 *
 * @author AnaMariana
 */
public class Menu_Pesquisa_Exercicios extends javax.swing.JPanel {

    Exercicios_Home                      Exercicios_Home;
    public  int                          IDSELECIONADA; 
    public Tabela_Pesquisa_BD_Exercicios Tabela_Pesquisa_BD_Exercicios;
     
    /**
     * Creates new form Cliente
     * @param Exercicios_Home2
     */
    public Menu_Pesquisa_Exercicios( Exercicios_Home Exercicios_Home2 ) {
        initComponents();
        
        Exercicios_Home = Exercicios_Home2;
        
        lbMateria.setVisible(false);
        cbMateria.setVisible(false);
        
        lbCategoria.setVisible(false);
        cbCategoria.setVisible(false);
        
        lbSubcategoria.setVisible(false);
        cbSubcategoria.setVisible(false);
        
        //lbAssunto.setVisible(false);
        //cbAssunto.setVisible(false);
        jpAssunto.setVisible(false);
        
        inicioCBS();
        setarCBMateria();        
    }
    
    private void inicioCBS(){        
        new Thread() {   @Override public void run() { try { Thread.sleep( 1 );         
            Color c = new Color( 255, 255, 255 );
        
            cbMateria     .setBackground( c );
            cbCategoria   .setBackground( c );
            cbSubcategoria.setBackground( c );  
            cbAssunto     .setBackground( c );  
        } catch( Exception e ){ JOPM JOptionPaneMod = new JOPM( 2, "inicioCBS(), \n"
                + e.getMessage() + "\n", "Menu_Pesquisa_Exercicios" ); } } }.start();       
    }
    
    public void tabela(Tabela_Pesquisa_BD_Exercicios Tabela_Pesquisa_BD_Exercicios2){ 
                
        try {                
            Tabela_Pesquisa_BD_Exercicios = Tabela_Pesquisa_BD_Exercicios2;                                    
        } catch( Exception e ){ e.printStackTrace(); JOPM JOptionPaneMod = new JOPM( 2, "tabela, \n"
                + e.getMessage() + "\n", "Menu_Pesquisa_Exercicios" ); }     
    }
                
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btExcluir = new javax.swing.JButton();
        btVisualizar = new javax.swing.JButton();
        btAlterar = new javax.swing.JButton();
        btExercicios = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        cbtipoP = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btPesquisar = new javax.swing.JButton();
        tfPesquisa = new javax.swing.JTextField();
        jp2 = new javax.swing.JPanel();
        cbSubcategoria = new javax.swing.JComboBox();
        lbSubcategoria = new javax.swing.JLabel();
        cbMateria = new javax.swing.JComboBox();
        lbMateria = new javax.swing.JLabel();
        lbCategoria = new javax.swing.JLabel();
        cbCategoria = new javax.swing.JComboBox();
        jpAssunto = new javax.swing.JPanel();
        cbAssunto = new javax.swing.JComboBox();
        lbAssunto = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("Dados do exercício");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        btExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utilidades_imagens/exluir.gif"))); // NOI18N
        btExcluir.setText("Excluir");
        btExcluir.setEnabled(false);
        btExcluir.setPreferredSize(new java.awt.Dimension(97, 25));
        btExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirActionPerformed(evt);
            }
        });

        btVisualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utilidades_imagens/olho.png"))); // NOI18N
        btVisualizar.setText("Visualizar");
        btVisualizar.setEnabled(false);
        btVisualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVisualizarActionPerformed(evt);
            }
        });

        btAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utilidades_imagens/alterar.gif"))); // NOI18N
        btAlterar.setText("Alterar");
        btAlterar.setEnabled(false);
        btAlterar.setPreferredSize(new java.awt.Dimension(97, 27));
        btAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAlterarActionPerformed(evt);
            }
        });

        btExercicios.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utilidades_imagens/book_next.png"))); // NOI18N
        btExercicios.setText("Exercícios");
        btExercicios.setToolTipText("Realizar Exercícios Pesquisados");
        btExercicios.setEnabled(false);
        btExercicios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btExerciciosMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(btAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(btVisualizar)
            .addComponent(btExercicios)
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btAlterar, btExcluir, btVisualizar});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(btAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(btExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(btVisualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btExercicios)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btAlterar, btExercicios, btVisualizar});

        jPanel5.setBackground(new java.awt.Color(253, 254, 247));

        jPanel6.setBackground(new java.awt.Color(253, 254, 247));

        cbtipoP.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        cbtipoP.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "TODOS", "NOME", "NOME E MATÉRIA", "MATÉRIA E CATEGORIA", "MATÉRIA, CATEGORIA E SUBCATEGORIA", "MATÉRIA, CATEGORIA, SUBCATEGORIA E ASSUNTO" }));
        cbtipoP.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(201, 239, 237), 1, true));
        cbtipoP.setPreferredSize(new java.awt.Dimension(150, 24));
        cbtipoP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbtipoPActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel5.setText("Pesquisar por:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(cbtipoP, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cbtipoP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel1.setBackground(new java.awt.Color(253, 254, 247));

        btPesquisar.setText("Pesquisar");
        btPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPesquisarActionPerformed(evt);
            }
        });

        tfPesquisa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfPesquisaKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(tfPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(tfPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jp2.setBackground(new java.awt.Color(253, 254, 247));

        cbSubcategoria.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        cbSubcategoria.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(201, 239, 237), 1, true));
        cbSubcategoria.setPreferredSize(new java.awt.Dimension(190, 24));
        cbSubcategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSubcategoriaActionPerformed(evt);
            }
        });

        lbSubcategoria.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lbSubcategoria.setText("Subcategoria");

        cbMateria.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        cbMateria.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(201, 239, 237), 1, true));
        cbMateria.setPreferredSize(new java.awt.Dimension(190, 24));
        cbMateria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMateriaActionPerformed(evt);
            }
        });

        lbMateria.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lbMateria.setText("Matéria");

        lbCategoria.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lbCategoria.setText("Categoria");

        cbCategoria.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        cbCategoria.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(201, 239, 237), 1, true));
        cbCategoria.setPreferredSize(new java.awt.Dimension(190, 24));
        cbCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCategoriaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jp2Layout = new javax.swing.GroupLayout(jp2);
        jp2.setLayout(jp2Layout);
        jp2Layout.setHorizontalGroup(
            jp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jp2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbMateria, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbMateria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbCategoria, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbSubcategoria, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbSubcategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jp2Layout.setVerticalGroup(
            jp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jp2Layout.createSequentialGroup()
                .addComponent(lbSubcategoria)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbSubcategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jp2Layout.createSequentialGroup()
                    .addComponent(lbCategoria)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jp2Layout.createSequentialGroup()
                    .addComponent(lbMateria)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(cbMateria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jpAssunto.setBackground(new java.awt.Color(253, 254, 247));

        cbAssunto.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        cbAssunto.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(201, 239, 237), 1, true));
        cbAssunto.setPreferredSize(new java.awt.Dimension(190, 24));
        cbAssunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAssuntoActionPerformed(evt);
            }
        });

        lbAssunto.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lbAssunto.setText("Assunto");

        javax.swing.GroupLayout jpAssuntoLayout = new javax.swing.GroupLayout(jpAssunto);
        jpAssunto.setLayout(jpAssuntoLayout);
        jpAssuntoLayout.setHorizontalGroup(
            jpAssuntoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpAssuntoLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jpAssuntoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbAssunto, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbAssunto, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpAssuntoLayout.setVerticalGroup(
            jpAssuntoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpAssuntoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbAssunto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbAssunto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jp2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jpAssunto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jp2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpAssunto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirActionPerformed
        excluir();
    }//GEN-LAST:event_btExcluirActionPerformed

    private void btAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAlterarActionPerformed
        alterar();
    }//GEN-LAST:event_btAlterarActionPerformed

    private void btVisualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVisualizarActionPerformed
        visualizar();
    }//GEN-LAST:event_btVisualizarActionPerformed

    private void cbtipoPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbtipoPActionPerformed
        try{
            //MeuObjeto obj = (MeuObjeto) combobox.getSelectedItem();
            //BookInfoMateria obj = (BookInfoMateria) cbMateria.getSelectedItem();
            //System.out.println( "obj.ID "+obj.ID );
            String op = cbtipoP.getSelectedItem().toString().trim();
            if( op.equals("NOME E MATÉRIA") ) {
                lbMateria.setVisible(true);
                cbMateria.setVisible(true);

                lbCategoria.setVisible(false);
                cbCategoria.setVisible(false);
                
                lbSubcategoria.setVisible(false);
                cbSubcategoria.setVisible(false);
                
                //lbAssunto.setVisible(false);
                //cbAssunto.setVisible(false);
                jpAssunto.setVisible(false);
                pesquisar();
            }
            else if( op.equals("MATÉRIA E CATEGORIA") ) {
                lbMateria.setVisible(true);
                cbMateria.setVisible(true);

                lbCategoria.setVisible(true);
                cbCategoria.setVisible(true);
                
                lbSubcategoria.setVisible(false);
                cbSubcategoria.setVisible(false);
                
                //lbAssunto.setVisible(false);
                //cbAssunto.setVisible(false);
                jpAssunto.setVisible(false);
                pesquisar();
            }
            else if( op.equals("MATÉRIA, CATEGORIA E SUBCATEGORIA") ) {
                lbMateria.setVisible(true);
                cbMateria.setVisible(true);

                lbCategoria.setVisible(true);
                cbCategoria.setVisible(true);
                
                lbSubcategoria.setVisible(true);
                cbSubcategoria.setVisible(true);
                
                //lbAssunto.setVisible(false);
                //cbAssunto.setVisible(false);
                jpAssunto.setVisible(false);
                pesquisar();
            }
            else if( op.equals("MATÉRIA, CATEGORIA, SUBCATEGORIA E ASSUNTO") ) {
                lbMateria.setVisible(true);
                cbMateria.setVisible(true);

                lbCategoria.setVisible(true);
                cbCategoria.setVisible(true);
                
                lbSubcategoria.setVisible(true);
                cbSubcategoria.setVisible(true);
                
                //lbAssunto.setVisible(true);
                //cbAssunto.setVisible(true);
                jpAssunto.setVisible(true);
                pesquisar();
            }
            else{

                lbMateria.setVisible(false);
                cbMateria.setVisible(false);

                lbCategoria.setVisible(false);
                cbCategoria.setVisible(false);
                
                lbSubcategoria.setVisible(false);
                cbSubcategoria.setVisible(false);
                
                //lbAssunto.setVisible(false);
                //cbAssunto.setVisible(false);
                jpAssunto.setVisible(false);
                pesquisar();
            }
        }
        catch( Exception e ){}
    }//GEN-LAST:event_cbtipoPActionPerformed

    private void cbMateriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMateriaActionPerformed
        setarCBCategoria();
        setarCBSubcategoria();
        setarCBAssunto();
        pesquisar();
    }//GEN-LAST:event_cbMateriaActionPerformed

    private void cbCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCategoriaActionPerformed
        setarCBSubcategoria();
        setarCBAssunto();
        pesquisar();
    }//GEN-LAST:event_cbCategoriaActionPerformed

    private void btPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPesquisarActionPerformed
        pesquisar();
    }//GEN-LAST:event_btPesquisarActionPerformed

    private void tfPesquisaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPesquisaKeyReleased
        pesquisar();
    }//GEN-LAST:event_tfPesquisaKeyReleased

    private void cbSubcategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSubcategoriaActionPerformed
        setarCBAssunto();
        pesquisar();
    }//GEN-LAST:event_cbSubcategoriaActionPerformed

    private void cbAssuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAssuntoActionPerformed
        pesquisar();
    }//GEN-LAST:event_cbAssuntoActionPerformed

    private void btExerciciosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btExerciciosMousePressed
        realizar_Exercicios();
    }//GEN-LAST:event_btExerciciosMousePressed

    private void pesquisar() {       
        new Thread() {   @Override public void run() { try { Thread.sleep( 1 ); 
            
            Query q = null;
            
            String tf = "";
            if( !tfPesquisa.getText().trim().equals("") ){
                tf = tfPesquisa.getText().trim().toUpperCase();
            }
            
            String op = cbtipoP.getSelectedItem().toString().trim();
            if( op.equals("TODOS") ) {
                q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.EXERCICIOS WHERE PERGUNTA LIKE ?", exercicios.Exercicios.class );
                q.setParameter(1, "%"+tf+"%");
            }
            else if( op.equals("NOME") ) {
                q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.EXERCICIOS WHERE PERGUNTA LIKE ?", exercicios.Exercicios.class );
                q.setParameter(1, "%"+tf+"%");
            } 
            else if( op.equals("NOME E MATÉRIA") ) {
                BookInfoMateria obj = (BookInfoMateria) cbMateria.getSelectedItem();
                
                q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.EXERCICIOS WHERE PERGUNTA LIKE ? AND ID_MATERIA = ?", exercicios.Exercicios.class );
                q.setParameter(1, "%"+tf+"%");
                q.setParameter(2, obj.ID ); 
            }   
            else if( op.equals("MATÉRIA E CATEGORIA") ) {
                BookInfoMateria   obj = (BookInfoMateria) cbMateria.getSelectedItem();
                BookInfoCategoria obj2 = (BookInfoCategoria) cbCategoria.getSelectedItem();
                
                q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.EXERCICIOS WHERE PERGUNTA LIKE ? AND ID_MATERIA = ? AND ID_CATEGORIA = ?", exercicios.Exercicios.class );
                q.setParameter(1, "%"+tf+"%");
                q.setParameter(2, obj.ID ); 
                q.setParameter(3, obj2.ID ); 
            } 
            else if( op.equals("MATÉRIA, CATEGORIA E SUBCATEGORIA") ) {
                BookInfoMateria      obj  = (BookInfoMateria)    cbMateria.getSelectedItem();
                BookInfoCategoria    obj2 = (BookInfoCategoria) cbCategoria.getSelectedItem();
                BookInfoSubcategoria obj3 = (BookInfoSubcategoria)   cbSubcategoria.getSelectedItem();
                
                q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.EXERCICIOS WHERE PERGUNTA LIKE ? AND ID_MATERIA = ? AND ID_CATEGORIA = ? AND ID_SUBCATEGORIA = ?", exercicios.Exercicios.class );
                q.setParameter(1, "%"+tf+"%");
                q.setParameter(2, obj.ID ); 
                q.setParameter(3, obj2.ID ); 
                q.setParameter(4, obj3.ID );
            } 
            else if( op.equals("MATÉRIA, CATEGORIA, SUBCATEGORIA E ASSUNTO") ) {
                BookInfoMateria      obj  = (BookInfoMateria)        cbMateria.getSelectedItem();
                BookInfoCategoria    obj2 = (BookInfoCategoria)      cbCategoria.getSelectedItem();
                BookInfoSubcategoria obj3 = (BookInfoSubcategoria)   cbSubcategoria.getSelectedItem();
                BookInfoAssunto      obj4 = (BookInfoAssunto)        cbAssunto.getSelectedItem();
                
                q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.EXERCICIOS WHERE PERGUNTA LIKE ? AND ID_MATERIA = ? AND ID_CATEGORIA = ? AND ID_SUBCATEGORIA = ? AND ID_ASSUNTO = ?", exercicios.Exercicios.class );
                q.setParameter(1, "%"+tf+"%");
                q.setParameter(2, obj.ID ); 
                q.setParameter(3, obj2.ID ); 
                q.setParameter(4, obj3.ID );
                q.setParameter(5, obj4.ID );
            }
            
            btExercicios.setEnabled(true); 
            Tabela_Pesquisa_BD_Exercicios.pesquisa(q);
                                    
        } catch( Exception e ){             
            try{
                
                btExercicios.setEnabled(false);
                Query q2 = null; Tabela_Pesquisa_BD_Exercicios.pesquisa(q2);
                 
            } catch( Exception e2 ){ }

        } } }.start(); 
    }
    
    private void realizar_Exercicios() {       
        new Thread() {   @Override public void run() { try { Thread.sleep( 1 ); 
            
            Query q = null;
            
            String tf = "";
            if( !tfPesquisa.getText().trim().equals("") ){
                tf = tfPesquisa.getText().trim().toUpperCase();
            }
            
            String op = cbtipoP.getSelectedItem().toString().trim();
            if( op.equals("TODOS") ) {
                q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.EXERCICIOS WHERE PERGUNTA LIKE ?", exercicios.Exercicios.class );
                q.setParameter(1, "%"+tf+"%");
            }
            else if( op.equals("NOME") ) {
                q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.EXERCICIOS WHERE PERGUNTA LIKE ?", exercicios.Exercicios.class );
                q.setParameter(1, "%"+tf+"%");
            } 
            else if( op.equals("NOME E MATÉRIA") ) {
                BookInfoMateria obj = (BookInfoMateria) cbMateria.getSelectedItem();
                
                q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.EXERCICIOS WHERE PERGUNTA LIKE ? AND ID_MATERIA = ?", exercicios.Exercicios.class );
                q.setParameter(1, "%"+tf+"%");
                q.setParameter(2, obj.ID ); 
            }   
            else if( op.equals("MATÉRIA E CATEGORIA") ) {
                BookInfoMateria   obj = (BookInfoMateria) cbMateria.getSelectedItem();
                BookInfoCategoria obj2 = (BookInfoCategoria) cbCategoria.getSelectedItem();
                
                q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.EXERCICIOS WHERE PERGUNTA LIKE ? AND ID_MATERIA = ? AND ID_CATEGORIA = ?", exercicios.Exercicios.class );
                q.setParameter(1, "%"+tf+"%");
                q.setParameter(2, obj.ID ); 
                q.setParameter(3, obj2.ID ); 
            } 
            else if( op.equals("MATÉRIA, CATEGORIA E SUBCATEGORIA") ) {
                BookInfoMateria      obj  = (BookInfoMateria)    cbMateria.getSelectedItem();
                BookInfoCategoria    obj2 = (BookInfoCategoria) cbCategoria.getSelectedItem();
                BookInfoSubcategoria obj3 = (BookInfoSubcategoria)   cbSubcategoria.getSelectedItem();
                
                q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.EXERCICIOS WHERE PERGUNTA LIKE ? AND ID_MATERIA = ? AND ID_CATEGORIA = ? AND ID_SUBCATEGORIA = ?", exercicios.Exercicios.class );
                q.setParameter(1, "%"+tf+"%");
                q.setParameter(2, obj.ID ); 
                q.setParameter(3, obj2.ID ); 
                q.setParameter(4, obj3.ID );
            } 
            else if( op.equals("MATÉRIA, CATEGORIA, SUBCATEGORIA E ASSUNTO") ) {
                BookInfoMateria      obj  = (BookInfoMateria)        cbMateria.getSelectedItem();
                BookInfoCategoria    obj2 = (BookInfoCategoria)      cbCategoria.getSelectedItem();
                BookInfoSubcategoria obj3 = (BookInfoSubcategoria)   cbSubcategoria.getSelectedItem();
                BookInfoAssunto      obj4 = (BookInfoAssunto)        cbAssunto.getSelectedItem();
                
                q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.EXERCICIOS WHERE PERGUNTA LIKE ? AND ID_MATERIA = ? AND ID_CATEGORIA = ? AND ID_SUBCATEGORIA = ? AND ID_ASSUNTO = ?", exercicios.Exercicios.class );
                q.setParameter(1, "%"+tf+"%");
                q.setParameter(2, obj.ID ); 
                q.setParameter(3, obj2.ID ); 
                q.setParameter(4, obj3.ID );
                q.setParameter(5, obj4.ID );
            }
            
            Exercicios_Home.Home.ControleTabs.AddTabsAoHome( "Exercícios", "/utilidades_imagens/book_next.png", new exercicios_display.Exercicios_Dysplay( Exercicios_Home.Home, q ) );
            //Exercicios_Home.Home.ControleTabs.AddTabSemControleNovo( Exercicios_Home.tabHome, "Exercícios", "/utilidades_imagens/book_next.png", new exercicios_display.Exercicios_Dysplay( Exercicios_Home.Home, q ) );    
            
        } catch( Exception e ){ 
                /*JOPM JOPM = new JOPM( 2, "vPesquisar(), \n"
                + e.getMessage() + "\n", "Menu_Pesquisa_Subcategorias" );*/ } } }.start(); 
    }
    
    private void excluir() {  
        new Thread() {   @Override public void run() { try { Thread.sleep( 1 ); 
            
            if( btExcluir.isEnabled() ) {
            
                if( IDSELECIONADA > 0 ) {
                    
                    String excluir = "DELETE FROM SCHEMAJMARY.EXERCICIOS WHERE ID = ?";
                    
                    DB DB = new DB();
                    Connection con = DB.derby(); //con.close();
                    PreparedStatement pstm;
                    pstm = con.prepareStatement(excluir);
                    pstm.setInt( 1, IDSELECIONADA );
                    pstm.executeUpdate();
                    
                    con.close();
 
                    botoesEstado(false, false, false);
                    pesquisar();
                }
                else{
                    JOPM JOptionPaneMod = new JOPM( 2, "ID SELECIONADA, "
                            + "\nNenhum Exercicio selecionado"
                            + "\nSelecione um Exercicio"
                            + "\n", "Exercicio selecionado" );
                
                    tfPesquisa.requestFocus();
                }
            }
            
        } catch( Exception e ){ JOPM JOptionPaneMod = new JOPM( 2, "excluir(), \n"
                + e.getMessage() + "\n", "Menu_Pesquisa_Exercicios" ); } } }.start(); 
    }
    
    private void alterar() {  
        new Thread() {   @Override public void run() { try { Thread.sleep( 1 ); 
            
            if( btAlterar.isEnabled() ) {
            
                if( IDSELECIONADA > 0 ) {
                    
                    exercicios.Exercicios Exercicios = new exercicios.Exercicios();
                    
                    Query q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.EXERCICIOS WHERE ID = ?", exercicios.Exercicios.class );
                    q.setParameter(1, IDSELECIONADA);   
                    
                    List<exercicios.Exercicios> list = q.getResultList();
                    
                    for (int i = 0; i < list.size(); i++){
                        
                        Exercicios.setId              ( list.get(i).getId()           );                        
                        Exercicios.setIdMateria       ( list.get(i).getIdMateria()    );
                        Exercicios.setIdCategoria     ( list.get(i).getIdCategoria()  );
                        Exercicios.setIdSubcategoria  ( list.get(i).getIdSubcategoria() );
                        Exercicios.setIdAssunto       ( list.get(i).getIdAssunto() );
                        
                        Exercicios.setPergunta        (list.get(i).getPergunta() );
                        Exercicios.setRespostacerta   (list.get(i).getRespostacerta() );
                        Exercicios.setRespostahtml    (list.get(i).getRespostahtml() );
                    }
                    
                    Exercicios_Atualizar Exercicios_Atualizar = new Exercicios_Atualizar(Exercicios_Home, Exercicios, "Alterar");
                }
                else{
                    JOPM JOptionPaneMod = new JOPM( 2, "ID SELECIONADA, "
                            + "\nNenhum Exercicio selecionado"
                            + "\nSelecione um Exercicio"
                            + "\n", "Exercicio selecionado" );
                
                    tfPesquisa.requestFocus();
                }
            }
            
        } catch( Exception e ){ JOPM JOptionPaneMod = new JOPM( 2, "alterar(), \n"
                + e.getMessage() + "\n", "Menu_Pesquisa_Exercicios" ); } } }.start(); 
    }
    
    private void visualizar() {  
       new Thread() {   @Override public void run() { try { Thread.sleep( 1 ); 
            
            if( btAlterar.isEnabled() ) {
            
                if( IDSELECIONADA > 0 ) {
                    
                    Exercicios Exercicios = new Exercicios();
                    
                    Query q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.EXERCICIOS WHERE ID = ?", exercicios.Exercicios.class );
                    q.setParameter(1, IDSELECIONADA);   
                    
                    List<exercicios.Exercicios> list = q.getResultList();
                    
                    for (int i = 0; i < list.size(); i++){
                        
                        Exercicios.setId              ( list.get(i).getId()           );                        
                        Exercicios.setIdMateria       ( list.get(i).getIdMateria()    );
                        Exercicios.setIdCategoria     ( list.get(i).getIdCategoria()  );
                        Exercicios.setIdSubcategoria  ( list.get(i).getIdSubcategoria() );
                        Exercicios.setIdAssunto       ( list.get(i).getIdAssunto() );
                        
                        Exercicios.setPergunta        (list.get(i).getPergunta() );
                        Exercicios.setRespostacerta   (list.get(i).getRespostacerta() );
                        Exercicios.setRespostahtml    (list.get(i).getRespostahtml() );
                    }
                    
                    Exercicios_Visualizar Exercicios_Visualizar = new Exercicios_Visualizar(Exercicios_Home, Exercicios );
                }
                else{
                    JOPM JOptionPaneMod = new JOPM( 2, "ID SELECIONADA, "
                            + "\nNenhum Exercicio selecionado"
                            + "\nSelecione um Exercicio"
                            + "\n", "Exercicio selecionado" );
                
                    tfPesquisa.requestFocus();
                }
            }
            
        } catch( Exception e ){ JOPM JOptionPaneMod = new JOPM( 2, "visualizar(), \n"
                + e.getMessage() + "\n", "Menu_Pesquisa_Exercicios" ); } } }.start(); 
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btAlterar;
    public javax.swing.JButton btExcluir;
    public javax.swing.JButton btExercicios;
    private javax.swing.JButton btPesquisar;
    public javax.swing.JButton btVisualizar;
    public javax.swing.JComboBox cbAssunto;
    public javax.swing.JComboBox cbCategoria;
    public javax.swing.JComboBox cbMateria;
    public javax.swing.JComboBox cbSubcategoria;
    public javax.swing.JComboBox cbtipoP;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jp2;
    private javax.swing.JPanel jpAssunto;
    private javax.swing.JLabel lbAssunto;
    private javax.swing.JLabel lbCategoria;
    private javax.swing.JLabel lbMateria;
    private javax.swing.JLabel lbSubcategoria;
    public static javax.swing.JTextField tfPesquisa;
    // End of variables declaration//GEN-END:variables
    
    boolean a, ex, v;
    public void botoesEstado(boolean a2, boolean ex2, boolean v2){      
        a = a2; ex = ex2; v = v2;    
        new Thread() {   @Override public void run() { try { Thread.sleep( 1 ); 
                    
            if( Bean_Usuario_Logado.ALTERARMATERIA == true ) { btAlterar   .setEnabled(a);  }
            if( Bean_Usuario_Logado.EXCLUIRMATERIA == true ) { btExcluir   .setEnabled(ex); }
            btVisualizar.setEnabled(v); 
                                    
        } catch( Exception e ){ e.printStackTrace(); JOPM JOptionPaneMod = new JOPM( 2, "botoesEstado(boolean a2, boolean ex2, boolean v2), \n"
                + e.getMessage() + "\n", "Menu_Pesquisa_Categorias" ); } } }.start();     
    }
    
    //setar CB Matéria
   private void setarCBMateria() {       
        new Thread() {   @Override public void run() { try { Thread.sleep( 1 ); 

            Query q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.MATERIA WHERE MATERIA LIKE ?", materias.Materia.class );
            q.setParameter(1, "%"+""+"%");            
            List<materias.Materia> list = q.getResultList();
            
            if( cbMateria.getItemCount() > 0 ) { cbMateria.removeAllItems(); }
            
            for (int i = 0; i < list.size(); i++){ 
                cbMateria.addItem( new BookInfoMateria( 
                    list.get(i).getId(),list.get(i).getMateria()
                    )
                );    
            }
            
            setarCBCategoria();
                        
        } catch( Exception e ){ JOPM JOptionPaneMod = new JOPM( 2, "setarCBMateria(), \n"
                + e.getMessage() + "\n", "Menu_Pesquisa_Subcategorias" ); } } }.start(); 
    }
   
   //setar CB Categoria
   private void setarCBCategoria() {       
        //new Thread() {   @Override public void run() { try { Thread.sleep( 1 ); 
       
       if( cbCategoria.getItemCount() > 0 ) { cbCategoria.removeAllItems(); }

        if( cbMateria.getItemCount() > 0 ) {
            BookInfoMateria obj = (BookInfoMateria) cbMateria.getSelectedItem();
            
            Query q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.CATEGORIA WHERE ID_MATERIA = ?", categorias.Categoria.class );
            q.setParameter(1, obj.ID );            
            List<categorias.Categoria> list = q.getResultList();
                                    
            for (int i = 0; i < list.size(); i++){ 
                cbCategoria.addItem( new BookInfoCategoria( 
                    list.get(i).getId(),list.get(i).getCategoria()
                    )
                );    
            }
            
            setarCBSubcategoria();
        }
                        
        //} catch( Exception e ){ JOPM JOPM = new JOPM( 2, "setarCBCategoria(), \n"
        //        + e.getMessage() + "\n", "Menu_Pesquisa_Subcategorias" ); } } }.start(); 
    }
   
   //setar CB Subcategoria
   private void setarCBSubcategoria() {       
        //new Thread() {   @Override public void run() { try { Thread.sleep( 1 ); 
       
       if( cbSubcategoria.getItemCount() > 0 ) { cbSubcategoria.removeAllItems(); }

        if( cbCategoria.getItemCount() > 0 ) {
            BookInfoCategoria obj2 = (BookInfoCategoria) cbCategoria.getSelectedItem();
            
            Query q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.SUBCATEGORIA WHERE ID_CATEGORIA = ?", subcategoria.Subcategoria.class );
            q.setParameter(1, obj2.ID );            
            List<subcategoria.Subcategoria> list = q.getResultList();
                                    
            for (int i = 0; i < list.size(); i++){ 
                cbSubcategoria.addItem( new BookInfoSubcategoria( 
                    list.get(i).getId(),list.get(i).getSubcategoria()
                    )
                );    
            }
            setarCBAssunto();
        }
                        
        //} catch( Exception e ){ JOPM JOPM = new JOPM( 2, "setarCBCategoria(), \n"
        //        + e.getMessage() + "\n", "Menu_Pesquisa_Subcategorias" ); } } }.start(); 
    }
   
   //setar CB Assunto
   private void setarCBAssunto() {       
        //new Thread() {   @Override public void run() { try { Thread.sleep( 1 ); 
       
       if( cbAssunto.getItemCount() > 0 ) { cbAssunto.removeAllItems(); }

        if( cbSubcategoria.getItemCount() > 0 ) {
            BookInfoSubcategoria obj2 = (BookInfoSubcategoria) cbSubcategoria.getSelectedItem();
            
            Query q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.ASSUNTO WHERE ID_SUBCATEGORIA = ?", assunto.Assunto.class );
            q.setParameter(1, obj2.ID );            
            List<assunto.Assunto> list = q.getResultList();
                                    
            for (int i = 0; i < list.size(); i++){ 
                cbAssunto.addItem( new BookInfoAssunto( 
                    list.get(i).getId(),list.get(i).getAssunto()
                    )
                );    
            }
        }
                        
        //} catch( Exception e ){ JOPM JOPM = new JOPM( 2, "setarCBCategoria(), \n"
        //        + e.getMessage() + "\n", "Menu_Pesquisa_Subcategorias" ); } } }.start(); 
    }
    
}
